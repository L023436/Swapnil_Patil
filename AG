LOG.info("#####ASSIGNSubcategory######{}",inputMap.Workitem.externalToolTicketDetails.subcategory)
def category = inputMap.Workitem.externalToolTicketDetails.subcategory

def jsonSlurper = new groovy.json.JsonSlurper();


if(inputMap.Workitem.state.stateId.equalsIgnoreCase("INPROGRESS")){
    group=""
 } 
 else if (inputMap.Workitem.state.stateId.equalsIgnoreCase("ERROR")||inputMap.Workitem.state.stateId.equalsIgnoreCase("OUTTASK") ||inputMap.Workitem.state.stateId.equalsIgnoreCase("MANUAL")){
LOG.info("########ERROR#########:")

if(inputMap.Workitem.useCaseState.stateId.equalsIgnoreCase("OUTTASK") ||inputMap.Workitem.useCaseState.stateId.equalsIgnoreCase("MANUAL")||inputMap.Workitem.useCaseState.stateId.equalsIgnoreCase("TRIAGED"))
{
 def slurpedText = jsonSlurper.parseText(inputMap.Workitem.notes);
 LOG.info("########slurpedText#########:{}",slurpedText.fault.faultName)
 if(category.equalsIgnoreCase("Linux") && (slurpedText.fault.faultName.equalsIgnoreCase("DaemonNotRunning")||slurpedText.fault.faultName.equalsIgnoreCase("SNMPAgentNotRunning")))
 
{
LOG.info("########insideDaemonNotRunningslurpedText#########:{}")
group="PLATFORM-LINUX-GLB"

}

if(category.equalsIgnoreCase("Linux") && (slurpedText.fault.faultName.equalsIgnoreCase("HandleHighCPULoad")||slurpedText.fault.faultName.equalsIgnoreCase("HighMemoryUtilizationLinux")||slurpedText.fault.faultName.equalsIgnoreCase("HighCPUUtilizationLinux")))
{
LOG.info("########insideHandleHighCPULoadgslurpedText#########:{}")
if(inputMap.Workitem.state.stateId.equalsIgnoreCase("OUTTASK"))
{
	if(slurpedText.fault.message.contains("####")){
		
		def assignTo = slurpedText.fault.message.split("####")[1]
LOG.info("#########assignTo##########:{}",assignTo)
def check = (assignTo.equals("null")) ? "success":"failure"
LOG.info("#########check ##########:{}",check )

if(check.equals("failure"))
{
		if(assignTo.equalsIgnoreCase("Linux Platform team"))
		{
			group="PLATFORM-LINUX-GLB"
		}

		else
		{
			group=assignTo
		}
}
	else{
		group="PLATFORM-LINUX-GLB"

	}
}

}
else{
	group="PLATFORM-LINUX-GLB"
}


}
 if(category.equalsIgnoreCase("Windows") && (slurpedText.fault.faultName.equalsIgnoreCase("HighMemoryUtilization")||slurpedText.fault.faultName.equalsIgnoreCase("SNMPAgentNotRunningWin")||slurpedText.fault.faultName.equalsIgnoreCase("WindowsHighDriveUtilization")))
 {
group="PLATFORM-WINDOWS-GLB"
}
else if ((category.equalsIgnoreCase("Windows")||category.equalsIgnoreCase("Appliance-Windows"))&&slurpedText.fault.faultName.equalsIgnoreCase("WindowsBackupFailures"))
{
group="PLATFORM-BACKUP-GLB"
}
}
else 
{
LOG.info("#######inside error case- {}")
def action = inputMap.Workitem.useCaseAction.action
LOG.info("#######work_notes -action-{}",action)
if((category.equalsIgnoreCase("Linux") && inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("LinuxUnresponsiveWebService"))|| (category.equalsIgnoreCase("Web Hosting Misc.") && inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("RestartTomcatInstance")))
{
group="WHO-GLB"
}
else if((category.equalsIgnoreCase("Windows") ||category.equalsIgnoreCase("SQL") ) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("EIP_Lilly_HighUtilization")))
{
group="DATABASE-SQLSERVER-GLB"	
}
else if((category.equalsIgnoreCase("Windows") ||category.equalsIgnoreCase("SQL") ) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("EIP_Lilly_HighBlockedProcess")))
{
group="DATABASE-SQLSERVER-GLB"	
}
else if((category.equalsIgnoreCase("Windows") ||category.equalsIgnoreCase("SQL") ) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("EIP_Lilly_JobFailure")))
{
group="DATABASE-SQLSERVER-GLB"	
}
else if((category.equalsIgnoreCase("Windows") ||category.equalsIgnoreCase("SQL") ) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("EIP_Lilly_DBFileGrowth")))
{
group="DATABASE-SQLSERVER-GLB"	
}
else if((category.equalsIgnoreCase("Windows") ||category.equalsIgnoreCase("SQL") ) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("EIP_Lilly_ServiceDown")))
{
group="DATABASE-SQLSERVER-GLB"	
}
else if((category.equalsIgnoreCase("Windows") ||category.equalsIgnoreCase("SQL") ) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("EIP_Lilly_PasswordManagement")))
{
group="DATABASE-SQLSERVER-GLB"	
}

else if((category.equalsIgnoreCase("Oracle") ||category.equalsIgnoreCase("Linux") ) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("EIP_Lilly_TableSpaceAlarm")))
{
group="DATABASE-ORACLE-GLB"	
}
else if((category.equalsIgnoreCase("Oracle") ||category.equalsIgnoreCase("Linux") ) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("EIP_Lilly_BackupFailure")))
{
group="DATABASE-ORACLE-GLB"	
}

else if((category.equalsIgnoreCase("Oracle") ||category.equalsIgnoreCase("Linux") ) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("EIP_Lilly_ExtentAlarm")))
{
group="DATABASE-ORACLE-GLB"	
}
else if((category.equalsIgnoreCase("Oracle") ||category.equalsIgnoreCase("Linux") ) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("EIP_Lilly_OracleSQLConnectionAlarm")))
{
group="DATABASE-ORACLE-GLB"	
}
else if((category.equalsIgnoreCase("Oracle") ) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("EIP_Lilly_AdhocBackup")))
{
group="DATABASE-ORACLE-GLB"	
}
else if(((category.equalsIgnoreCase("Windows") ||category.equalsIgnoreCase("VM-ESX") ) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("VMwareDatastorelowspaceAlert"))) || ((category.equalsIgnoreCase("Appliance - Windows") ||category.equalsIgnoreCase("VM-ESX"))  &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("VMwareHostDown"))))
{
group="PLATFORM-VIRTUAL-GLB"
}
else if(((category.equalsIgnoreCase("Windows")) || (category.equalsIgnoreCase(".NET")) || (category.equalsIgnoreCase("Appliance - Windows"))) && (inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("UnresponsiveHTTPSWebService")))
{
group="WHO-GLB"
}
else if(category.equalsIgnoreCase("Windows"))
{  
group="PLATFORM-WINDOWS-GLB"
}
else if((category.equalsIgnoreCase("Linux") ||category.equalsIgnoreCase("Unix") ||category.equalsIgnoreCase("Appliance-Linux") ) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("LinuxPatchFailure")))
{
group="PLATFORM-BACKUP-GLB"
}
else if((category.equalsIgnoreCase("Linux") ||category.equalsIgnoreCase("Unix") ) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("LinuxHomeDriveUtilization")))
{
group="PLATFORM-NAS-GLB"
}

else if((category.equalsIgnoreCase("Linux") ||category.equalsIgnoreCase("Unix") ) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("HighSwapSpaceUtilization_SO")))
{
	def slurpedText = jsonSlurper.parseText(inputMap.Workitem.notes);
	 LOG.info("#######work_notes ERROR slurped :{}",slurpedText)
	LOG.info("#######work_notes ERROR slurped.errorStream :{}",slurpedText.errorStream)
	LOG.info("#######work_notes ERROR slurped.outputStream :{}",slurpedText.outputStream)
	LOG.info("#######work_notes ERROR slurped.workNotes :{}",slurpedText.workNotes)
	
	def notes = ((slurpedText.errorStream == null) ? "" : slurpedText.errorStream) + ((slurpedText.outputStream  == null) ? "" : slurpedText.outputStream);
	LOG.info("#######work_notes ERROR notes1:{}",notes)
	if(notes.contains("DATABASE-ORACLE-GLB"))
	{
		group="DATABASE-ORACLE-GLB"
	}
	else if(notes.contains("INFOINTG-INFORMATICA-GLB"))
	{
		group="INFOINTG-INFORMATICA-GLB"
	}
	else if(notes.contains("INFOINTG-MQ-OPS-GLB"))
	{
		group="INFOINTG-MQ-OPS-GLB"
	}
	else if(notes.contains("DM-HADOOP-GLB"))
	{
		group="DM-HADOOP-GBL"
	}
	else if(notes.contains("WHO-GLB"))
	{
		group="WHO-GLB"
	}
	else if(notes.contains("SPLUNK-INFOSEC-SUPPORT"))
	{
		group="SPLUNK-INFOSEC-SUPPORT"
	}
	else if(notes.contains("INFOINTG-ECOMMERCE-GLB"))
	{
		group="INFOINTG-ECOMMERCE-GLB"
	}
	else if(notes.contains("INFOINTG-ANZO-GLB"))
	{
		group="INFOINTG-ANZO-GLB"
	}
	else if(notes.contains("PLATFORM-TCSIGNIO-SUPPORT-GLB"))
	{
		group="PLATFORM-TCSIGNIO-SUPPORT-GLB"
	}
	else
	{
		group="PLATFORM-LINUX-GLB"    
	}
}
else if(((category.equalsIgnoreCase("Windows")) || (category.equalsIgnoreCase("Linux")) ) && (inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("EIP_MQFTE_LILLY")))
{
group="INFOINTG-MQ-OPS-GLB"
}
else if(((category.equalsIgnoreCase("Windows")) || (category.equalsIgnoreCase("Linux")) ) && (inputMap.Workitem.externalToolTicketDetails.short_description.toUpperCase().startsWith("TASK") && inputMap.Workitem.externalToolTicketDetails.short_description.toUpperCase().endsWith("_MQFILEAGE")))
{
group="INFOINTG-MQ-OPS-GLB"
}
else if((category.equalsIgnoreCase("Oracle") ||category.equalsIgnoreCase("Linux") ) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("EIP_Lilly_OracleFileSystem")))
{
group="DATABASE-ORACLE-GLB"	
}
else if(category.equalsIgnoreCase("Linux") )
{
group="PLATFORM-LINUX-GLB"
}
}
}
	
else if(inputMap.Workitem.state.stateId.equalsIgnoreCase("SUCCESS")){
	if(((category.equalsIgnoreCase("Windows") ||category.equalsIgnoreCase("SQL") ) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("EIP_Lilly_HighUtilization"))) || ((category.equalsIgnoreCase("Oracle") ||category.equalsIgnoreCase("Linux") ) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("EIP_Lilly_TableSpaceAlarm"))) || ((category.equalsIgnoreCase("Oracle") ||category.equalsIgnoreCase("Linux") ) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("EIP_Lilly_ExtentAlarm"))) || ((category.equalsIgnoreCase("Windows") ||category.equalsIgnoreCase("SQL")) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("EIP_Lilly_HighBlockedProcess"))) || ((category.equalsIgnoreCase("Oracle") ||category.equalsIgnoreCase("Linux")) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("EIP_Lilly_OracleSQLConnectionAlarm"))) || ((category.equalsIgnoreCase("Oracle")) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("EIP_Lilly_AdhocBackup"))) || ((category.equalsIgnoreCase("Windows") ||category.equalsIgnoreCase("SQL")) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("EIP_Lilly_JobFailure"))) || ((category.equalsIgnoreCase("Windows") ||category.equalsIgnoreCase("SQL")) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("EIP_Lilly_DBFileGrowth"))) || ((category.equalsIgnoreCase("Windows") ||category.equalsIgnoreCase("SQL")) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("EIP_Lilly_ServiceDown"))) || ((category.equalsIgnoreCase("Oracle") ||category.equalsIgnoreCase("Linux") ) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("EIP_Lilly_BackupFailure"))) || ((category.equalsIgnoreCase("Windows") ||category.equalsIgnoreCase("SQL")) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("EIP_Lilly_PasswordManagement")) ) || ((category.equalsIgnoreCase("Oracle") ||category.equalsIgnoreCase("Linux") ) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("EIP_Lilly_OracleFileSystem"))) )
	{
	group="EIP-TCSIGNIO-GLB"	
	}
	else
	{
     group="PLATFORM-TCSIGNIO-GLB"
	}
	
	
 }

else if (inputMap.Workitem.state.stateId.equalsIgnoreCase("PARSEERROR")||inputMap.Workitem.state.stateId.equalsIgnoreCase("BLOCKED")){
  if(inputMap.Workitem.state.stateId.equalsIgnoreCase("BLOCKED"))
  {
def action = inputMap.Workitem.useCaseAction.action
LOG.info("#######ASSIGNGRP -action-{}",action)
def action1 = inputMap.Workitem.externalToolTicketDetails.short_description
LOG.info("#######ASSIGNGRP -action-{}",action1)
if(((category.equalsIgnoreCase("Windows") ||category.equalsIgnoreCase("VM-ESX") ) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("VMwareDatastorelowspaceAlert"))) || ((category.equalsIgnoreCase("Appliance - Windows") ||category.equalsIgnoreCase("VM-ESX"))  &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("VMwareHostDown"))))
{
group="PLATFORM-VIRTUAL-GLB"
}

if(((category.equalsIgnoreCase("Windows") ||category.equalsIgnoreCase("VM-ESX") ) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("VMwareDatastorelowspaceAlert"))) || ((category.equalsIgnoreCase("Appliance - Windows") ||category.equalsIgnoreCase("VM-ESX"))  &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("VMwareHostDown"))))
{
group="PLATFORM-VIRTUAL-GLB"
}
else if(((category.equalsIgnoreCase("Windows")) || (category.equalsIgnoreCase("Linux")) ) && (inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("EIP_MQFTE_LILLY")))
{
group="INFOINTG-MQ-OPS-GLB"
}
else if(((category.equalsIgnoreCase("Windows")) || (category.equalsIgnoreCase("Linux")) ) && (inputMap.Workitem.externalToolTicketDetails.short_description.toUpperCase().startsWith("TASK") && inputMap.Workitem.externalToolTicketDetails.short_description.toUpperCase().endsWith("_MQFILEAGE")))
{
group="INFOINTG-MQ-OPS-GLB"
}
else if((category.equalsIgnoreCase("Oracle") ||category.equalsIgnoreCase("Linux") ) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("EIP_Lilly_OracleFileSystem")))
{
group="DATABASE-ORACLE-GLB"	
}
else if(category.equals("Windows"))
{
group="PLATFORM-WINDOWS-GLB"
}

else if(category.equals("Linux"))
{
group="PLATFORM-LINUX-GLB"
}

}
if(inputMap.Workitem.state.stateId.equalsIgnoreCase("PARSEERROR")){
LOG.info("#########insideparseerror##########:{}")
LOG.info("#########sd##########:{}",inputMap.Workitem.externalToolTicketDetails.short_description)
 if((category.equals("Windows") ||category.equals("Appliance-Windows") ) && inputMap.Workitem.externalToolTicketDetails.short_description.toUpperCase().contains("BACKUP"))
{
group="PLATFORM-BACKUP-GLB"
}
else if((category.equals("Linux") || category.equals("Windows") ) && inputMap.Workitem.externalToolTicketDetails.short_description.toUpperCase().endsWith("_MQFILEAGE") && inputMap.Workitem.externalToolTicketDetails.short_description.toUpperCase().startsWith("TASK"))
{
group="INFOINTG-MQ-OPS-GLB"
}
else if(((category.contains("Windows")) || (category.contains("Linux")) ) && (inputMap.Workitem.useCaseAction.action.contains("EIP_MQFTE_LILLY")))
{
group="INFOINTG-MQ-OPS-GLB"
}
else if(((category.contains("Windows")||category.contains("VM-ESX"))&&(inputMap.Workitem.externalToolTicketDetails.short_description.toUpperCase().contains("_LILLY - DATASTORE LOW FREE SPACE")||inputMap.Workitem.externalToolTicketDetails.short_description.toUpperCase().contains("_LILLY - LOW DATASTORE FREE SPACE"))) || ((category.contains("Appliance - Windows")||category.contains("VM-ESX"))&&(inputMap.Workitem.externalToolTicketDetails.short_description.toUpperCase().contains("_DOWN"))))
{
group="PLATFORM-VIRTUAL-GLB"
}
else if (((category.equalsIgnoreCase("Windows")) || (category.equalsIgnoreCase(".NET")) || (category.equalsIgnoreCase("Appliance - Windows"))) && ((inputMap.Workitem.externalToolTicketDetails.short_description.toUpperCase().contains("LLY-")) && (inputMap.Workitem.externalToolTicketDetails.short_description.toUpperCase().contains("_UNRESPONSIVEHTTPSWEBSERVICE" )|| inputMap.Workitem.externalToolTicketDetails.short_description.toUpperCase().contains("_UNRESPONSIVEWEBSERVICE"))))
{
group="WHO-GLB"
}
else if((category.equalsIgnoreCase("Oracle") ||category.equalsIgnoreCase("Linux") ) &&(inputMap.Workitem.useCaseAction.action.equalsIgnoreCase("EIP_Lilly_OracleFileSystem")))
{
group="DATABASE-ORACLE-GLB"	
}
else if(category.equals("Windows"))
{
group="PLATFORM-WINDOWS-GLB"
}
else if((category.equals("Linux") ||category.equals("Appliance-Linux") ) && inputMap.Workitem.externalToolTicketDetails.short_description.toUpperCase().contains("BACKUP"))
{
group="PLATFORM-BACKUP-GLB"
}
else if((category.equals("Linux")  ) && inputMap.Workitem.externalToolTicketDetails.short_description.toUpperCase().contains("CAPACITY"))
{
group="PLATFORM-BACKUP-GLB"
}
else if(category.equals("Linux"))
{

group="PLATFORM-LINUX-GLB" 
}



}
} 
LOG.info("########Assignmentgroup#########:{}",group)
return group;